sigma =c( rep(sigma1,1000))
library(stats4)
project = read.csv('bitcoin_price.csv')
data = matrix(ncol = 3, nrow = 1000)
data[,1] = project$Date[1:1000]
data[,2] = project$Close[1:1000]
data[1:1000,3] = log(project$Close[1001:2]/project$Close[1000:1])
return = c()
return= data[1:1000, 3]
function1 = function(parameter) {
sigma = rep(NA,1000)
sigma[1] = parameter[4]^2
for (i in 2:1000) {
sigma[i] = (1-parameter[1]-parameter[2])*parameter[3]^2+parameter[1]*return[i-1]^2+
parameter[2]*sigma[i-1]
}
densityf = rep(NA,1000)
for(i in 1:1000){
densityf[i] =(1/sqrt(2*pi*sigma[i]))*exp(-return[i]^2/(2*sigma[i]))
}
-sum(log(densityf))
}
par1 = optim(c(0.1,0.5,0.01,0.01),function1)
cat("alpha, beta, sigma, sigma1 estimated",par1$par)
alpha = par1$par[1]
beta = par1$par[2]
sigmaimp = par1$par[3]
sigma1 = par1$par[4]
sigma =c( rep(sigma1,1000))
for (i in 2:1000) {
sigma[i] = (1-par1$par[1]-par1$par[2])*par1$par[3]^2+par1$par[1]*return[i-1]^2+
par1$par[2]*sigma[i-1]
}
sigma_t1 = sqrt(sigmaimp^2 + alpha*(return[1000]^2 - sigmaimp^2)+beta*(sigma[1000]^2-sigmaimp^2))
sigma_forcast = c()
weight = c(rep(1,100))
for(i in 2:100){
weight[i] = (alpha+beta)*weight[i-1]
}
#for (i in 1:100){
#sigma_forcast[i] =
#}
#rng
#R_t1 = z*sigma_t1
sigma =c( rep(sigma1,1000))
for (i in 2:1000) {
sigma[i] = (1-par1$par[1]-par1$par[2])*par1$par[3]^2+par1$par[1]*return[i-1]^2+
par1$par[2]*sigma[i-1]
}
sigma_t1 = sqrt(sigmaimp^2 + alpha*(return[1000]^2 - sigmaimp^2)+beta*(sigma[1000]^2-sigmaimp^2))
sigma_forcast = c()
weight = c(rep(1,100))
time = c(rep(1,100))
for(i in 2:100){
weight[i] = (alpha+beta)*weight[i-1]
time[i] = sum(weight)
}
#for (i in 1:100){
#sigma_forcast[i] =
#}
#rng
#R_t1 = z*sigma_t1
sigma =c( rep(sigma1,1000))
for (i in 2:1000) {
sigma[i] = (1-par1$par[1]-par1$par[2])*par1$par[3]^2+par1$par[1]*return[i-1]^2+
par1$par[2]*sigma[i-1]
}
sigma_t1 = sqrt(sigmaimp^2 + alpha*(return[1000]^2 - sigmaimp^2)+beta*(sigma[1000]^2-sigmaimp^2))
sigma_forcast = c()
weight = c(rep(1,100))
time = c(rep(0,100))
for(i in 2:100){
weight[i] = (alpha+beta)*weight[i-1]
time[i] = sum(weight)
}
#for (i in 1:100){
#sigma_forcast[i] =
#}
#rng
#R_t1 = z*sigma_t1
sigma =c( rep(sigma1,1000))
for (i in 2:1000) {
sigma[i] = (1-par1$par[1]-par1$par[2])*par1$par[3]^2+par1$par[1]*return[i-1]^2+
par1$par[2]*sigma[i-1]
}
sigma_t1 = sqrt(sigmaimp^2 + alpha*(return[1000]^2 - sigmaimp^2)+beta*(sigma[1000]^2-sigmaimp^2))
sigma_forcast = c()
weight = c(rep(0,100))
weight[1] = 1
time = c(rep(0,100))
for(i in 2:100){
weight[i] = (alpha+beta)*weight[i-1]
time[i] = sum(weight)
}
#for (i in 1:100){
#sigma_forcast[i] =
#}
#rng
#R_t1 = z*sigma_t1
sigma =c( rep(sigma1,1000))
for (i in 2:1000) {
sigma[i] = (1-par1$par[1]-par1$par[2])*par1$par[3]^2+par1$par[1]*return[i-1]^2+
par1$par[2]*sigma[i-1]
}
sigma_t1 = sqrt(sigmaimp^2 + alpha*(return[1000]^2 - sigmaimp^2)+beta*(sigma[1000]^2-sigmaimp^2))
sigma_forcast = c()
weight = c(rep(0,100))
weight[1] = 1
time = c(rep(0,100))
time[1] = 1
for(i in 2:100){
weight[i] = (alpha+beta)*weight[i-1]
time[i] = sum(weight)
}
#for (i in 1:100){
#sigma_forcast[i] =
#}
#rng
#R_t1 = z*sigma_t1
sigma =c( rep(sigma1,1000))
for (i in 2:1000) {
sigma[i] = (1-par1$par[1]-par1$par[2])*par1$par[3]^2+par1$par[1]*return[i-1]^2+
par1$par[2]*sigma[i-1]
}
sigma_t1 = sqrt(sigmaimp^2 + alpha*(return[1000]^2 - sigmaimp^2)+beta*(sigma[1000]^2-sigmaimp^2))
sigma_forcast = c()
weight = c(rep(0,100))
weight[1] = 1
time = c(rep(0,100))
time[1] = 1
for(i in 2:100){
weight[i] = (alpha+beta)*weight[i-1]
time[i] = sum(weight)
}
time
#for (i in 1:100){
#sigma_forcast[i] =
#}
#rng
#R_t1 = z*sigma_t1
sigma =c( rep(sigma1,1000))
for (i in 2:1000) {
sigma[i] = (1-par1$par[1]-par1$par[2])*par1$par[3]^2+par1$par[1]*return[i-1]^2+
par1$par[2]*sigma[i-1]
}
sigma_t1 = sqrt(sigmaimp^2 + alpha*(return[1000]^2 - sigmaimp^2)+beta*(sigma[1000]^2-sigmaimp^2))
sigma_forcast = c()
weight = c(rep(0,100))
weight[1] = 1
time = c(rep(0,100))
time[1] = 1
for(i in 2:100){
weight[i] = (alpha+beta)*weight[i-1]
time[i] = sum(weight)
}
time
weight
#for (i in 1:100){
#sigma_forcast[i] =
#}
#rng
#R_t1 = z*sigma_t1
sigma =c( rep(sigma1,1000))
for (i in 2:1000) {
sigma[i] = (1-par1$par[1]-par1$par[2])*par1$par[3]^2+par1$par[1]*return[i-1]^2+
par1$par[2]*sigma[i-1]
}
sigma_t1 = sqrt(sigmaimp^2 + alpha*(return[1000]^2 - sigmaimp^2)+beta*(sigma[1000]^2-sigmaimp^2))
sigma_forcast = c()
weight = c(rep(0,100))
weight[1] = 1
time = c(rep(0,100))
time[1] = 1
for(i in 2:100){
weight[i] = (alpha+beta)*weight[i-1]
time[i] = sum(weight)
}
#for (i in 1:100){
#sigma_forcast[i] =
#}
#rng
#R_t1 = z*sigma_t1
sigma =c( rep(sigma1,1000))
for (i in 2:1000) {
sigma[i] = (1-par1$par[1]-par1$par[2])*par1$par[3]^2+par1$par[1]*return[i-1]^2+
par1$par[2]*sigma[i-1]
}
sigma_t1 = sqrt(sigmaimp^2 + alpha*(return[1000]^2 - sigmaimp^2)+beta*(sigma[1000]^2-sigmaimp^2))
sigma_forcast = c()
weight = c(rep(0,100))
weight[1] = 1
time = c(rep(0,100))
time[1] = 1
for(i in 2:100){
weight[i] = (alpha+beta)*weight[i-1]
time[i] = sum(weight)
}
for (i in 1:100){
sigma_forcast[i] = i*sigmaimp^2 + time[i]*(sigma_t1^2-sigmaimp^2)
}
#rng
#R_t1 = z*sigma_t1
sigma =c( rep(sigma1,1000))
for (i in 2:1000) {
sigma[i] = (1-par1$par[1]-par1$par[2])*par1$par[3]^2+par1$par[1]*return[i-1]^2+
par1$par[2]*sigma[i-1]
}
sigma_t1 = sqrt(sigmaimp^2 + alpha*(return[1000]^2 - sigmaimp^2)+beta*(sigma[1000]^2-sigmaimp^2))
sigma_forcast = c()
weight = c(rep(0,100))
weight[1] = 1
time = c(rep(0,100))
time[1] = 1
for(i in 2:100){
weight[i] = (alpha+beta)*weight[i-1]
time[i] = sum(weight)
}
for (i in 1:100){
sigma_forcast[i] = i*sigmaimp^2 + time[i]*(sigma_t1^2-sigmaimp^2)
}
sigma_forcast
#rng
#R_t1 = z*sigma_t1
sigma =c( rep(sigma1,1000))
for (i in 2:1000) {
sigma[i] = (1-par1$par[1]-par1$par[2])*par1$par[3]^2+par1$par[1]*return[i-1]^2+
par1$par[2]*sigma[i-1]
}
sigma_t1 = sqrt(sigmaimp^2 + alpha*(return[1000]^2 - sigmaimp^2)+beta*(sigma[1000]^2-sigmaimp^2))
sigma_forcast = c()
weight = c(rep(0,100))
weight[1] = 1
time = c(rep(0,100))
time[1] = 1
for(i in 2:100){
weight[i] = (alpha+beta)*weight[i-1]
time[i] = sum(weight)
}
for (i in 1:100){
sigma_forcast[i] = sqrt(i*sigmaimp^2 + time[i]*(sigma_t1^2-sigmaimp^2))
}
sigma_forcast
#rng
#R_t1 = z*sigma_t1
set.seed(960319)
normal = rnorm(1000)
normal1 = matrix(nrow = 10, ncol = 100)
set.seed(960319)
normal = rnorm(1000)
normal1 = matrix(nrow = 10, ncol = 100)
set.seed(960319)
normal = rnorm(5000)
normal1 = matrix(nrow = 50, ncol = 100)
set.seed(960319)
normal = rnorm(5000)
normal1 = matrix(nrow = 50, ncol = 100)
for(i in 1:100){
normal1[i,]= normal[50*(i-1):50*i]
}
set.seed(960319)
normal = rnorm(5000)
normal1 = matrix(nrow = 50, ncol = 100)
for(i in 1:100){
normal1[,i]= normal[50*(i-1):50*i]
}
set.seed(960319)
normal = rnorm(5000)
normal1 = matrix(nrow = 50, ncol = 100)
for(i in 1:100){
normal1[,i]= normal[i,50*(i-1):50*i]
}
set.seed(960319)
normal = rnorm(5000)
normal1 = matrix(nrow = 50, ncol = 100)
for(i in 1:100){
normal1[,i]= normal[50*(i-1):50*i,i]
}
set.seed(960319)
normal = rnorm(5000)
normal1 = matrix(nrow = 50, ncol = 100)
for(i in 1:100){
normal1[i,]= normal[50*(i-1):50*i,i]
}
set.seed(960319)
normal = rnorm(5000)
normal1 = matrix(nrow = 50, ncol = 100)
for(i in 1:100){
normal1[i,]= normal[50*(i-1):50*i]
}
set.seed(960319)
normal = rnorm(5000)
normal1 = matrix(nrow = 50, ncol = 100)
for(i in 1:100){
normal1[,i]= normal[50*(i-1):50*i]
}
set.seed(960319)
normal = rnorm(5000)
normal1 = matrix(nrow = 50, ncol = 100)
for(i in 1:50){
normal1[,i]= normal[50*(i-1):50*i]
}
set.seed(960319)
normal = rnorm(5000)
normal1 = matrix(nrow = 50, ncol = 100)
for(i in 1:100){
normal1[i,]= normal[50*(i-1):50*i]
}
set.seed(960319)
normal = rnorm(5000)
normal1 = matrix(nrow = 50, ncol = 100)
for(i in 1:50){
normal1[i,]= normal[100*(i-1):100*i]
}
set.seed(960319)
normal = rnorm(5000)
normal1 = matrix(nrow = 50, ncol = 100)
for(i in 1:50){
normal1[i,]= normal[100*(i-1)+1:100*i]
}
View(normal1)
set.seed(960319)
normal = rnorm(5000)
normal1 = matrix(nrow = 50, ncol = 100)
for(i in 1:50){
normal1[i,]= normal[100*(i-1)+1:100*i]
}
set.seed(960319)
normal = rnorm(5000)
normal1 = matrix(nrow = 50, ncol = 100,normal)
for(i in 1:50){
normal1[i,]= normal[100*(i-1)+1:100*i]
}
normal1
set.seed(960319)
normal = rnorm(5000)
normal1 = matrix(nrow = 50, ncol = 100,normal)
normal1
normal
set.seed(960319)
normal = rnorm(5000)
normal1 = matrix(nrow = 50, ncol = 100,normal)
View(normal1)
set.seed(960319)
normal = rnorm(5000)
normal1 = matrix(nrow = 50, ncol = 100,normal)
return = matrix(nrow = 50,ncol = 100)
for(i in 1:50){
for(j in 1:100){
return[i,j]=normal1*sigma_forcast[j]
}
}
set.seed(960319)
normal = rnorm(5000)
normal1 = matrix(nrow = 50, ncol = 100,normal)
return = matrix(nrow = 50,ncol = 100)
for(i in 1:50){
for(j in 1:100){
return[i,j]=normal1[i,j]*sigma_forcast[j]
}
}
set.seed(960319)
normal = rnorm(5000)
normal1 = matrix(nrow = 50, ncol = 100,normal)
return_2 = matrix(nrow = 50,ncol = 100)
bitcoin_price = matrix(nrow=50, ncol = 100)
for(i in 1:50){
for(j in 1:100){
return_2[i,j]=normal1[i,j]*sigma_forcast[j]
bitcoin_price[i,j] = e^return_2[i,j]*data[1000,2]
}
}
set.seed(960319)
normal = rnorm(5000)
normal1 = matrix(nrow = 50, ncol = 100,normal)
return_2 = matrix(nrow = 50,ncol = 100)
bitcoin_price = matrix(nrow=50, ncol = 100)
for(i in 1:50){
for(j in 1:100){
return_2[i,j]=normal1[i,j]*sigma_forcast[j]
bitcoin_price[i,j] = exp(return_2[i,j])*data[1000,2]
}
}
View(bitcoin_price)
View(data)
View(return_2)
View(data)
set.seed(960319)
normal = rnorm(5000)
normal1 = matrix(nrow = 50, ncol = 100,normal)
return_2 = matrix(nrow = 50,ncol = 100)
bitcoin_price = matrix(nrow=50, ncol = 100)
for(i in 1:50){
for(j in 1:100){
return_2[i,j]=normal1[i,j]*sigma_forcast[j]
bitcoin_price[i,j] = exp(return_2[i,j])*data[1,2]
}
}
set.seed(960319)
normal = rnorm(5000)
normal1 = matrix(nrow = 50, ncol = 100,normal)
return_2 = matrix(nrow = 50,ncol = 100)
bitcoin_price = matrix(nrow=50, ncol = 100)
for(i in 1:50){
for(j in 1:100){
return_2[i,j]=normal1[i,j]*sigma_forcast[j]
bitcoin_price[i,j] = exp(return_2[i,j])*data[1,2]
}
}
bitcoin_price
set.seed(960319)
normal = rnorm(5000)
normal1 = matrix(nrow = 50, ncol = 100,normal)
return_2 = matrix(nrow = 50,ncol = 100)
bitcoin_price = matrix(nrow=50, ncol = 100)
for(i in 1:50){
for(j in 1:100){
return_2[i,j]=normal1[i,j]*sigma_forcast[j]
bitcoin_price[i,j] = exp(return_2[i,j])*data[1,2]
}
}
bitcoin_price
write.csv(bitcoin_price, file="c:/bear.csv")
write.csv(bitcoin_price)
set.seed(960319)
normal = rnorm(5000)
normal1 = matrix(nrow = 50, ncol = 100,normal)
return_2 = matrix(nrow = 50,ncol = 100)
bitcoin_price = matrix(nrow=50, ncol = 100)
for(i in 1:50){
for(j in 1:100){
return_2[i,j]=normal1[i,j]*sigma_forcast[j]
bitcoin_price[i,j] = exp(return_2[i,j])*data[1,2]
}
}
bitcoin_price
write.csv(bitcoin_price,file="C:\Users\ZIZZ ZEN\Desktop/bearf2.csv")
write.csv(bitcoin_price,file="\Users\ZIZZ ZEN\Desktop/bearf2.csv")
write.csv(bitcoin_price,file="bearf2.csv")
ggplot(data=bitcoin_price, aes(x=wt, y=mpg)) + geom_point()
library(ggplot2)
ggplot(data=bitcoin_price, aes(x=wt, y=mpg)) + geom_point()
frame=matrix(bitcoin_price,ncol=100,nrow=50
frame
as.data.frame(bitcoin_price)
?ggplot
ggplot(data=frame)
ggplot(data=frame,mapping = aes(x = x))
library(caret)
featurePlot(x = bitcoin_price[, c("a", "b", "c", "d")], y = bitcoin_price$j,
col = ifelse(train_data$d, "Green", "Blue"))
featurePlot(x = bitcoin_price[, ], y = bitcoin_price$j,
col = ifelse(train_data$d, "Green", "Blue"))
featurePlot(x = bitcoin_price[, ], y = bitcoin_price,
col = ifelse(train_data$d, "Green", "Blue"))
barplot(bitcoin_price)
